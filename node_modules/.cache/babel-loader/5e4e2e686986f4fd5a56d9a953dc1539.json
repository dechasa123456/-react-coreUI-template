{"ast":null,"code":"import _classCallCheck from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/npm/Downloads/temp/src/views/Appliers.js\";\nimport React, { Component } from 'react';\nimport { CBadge, CCard, CCardBody, CCardHeader, CCol, CDataTable, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CFormGroup, CInput, CLabel, CSelect, CForm, CButton, CRow } from '@coreui/react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport CIcon from '@coreui/icons-react';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar getBadge = function getBadge(status) {\n  switch (status) {\n    case 'Active':\n      return 'success';\n\n    case 'Inactive':\n      return 'secondary';\n\n    case 'Pending':\n      return 'warning';\n\n    case 'Banned':\n      return 'danger';\n\n    default:\n      return 'primary';\n  }\n};\n\nvar fields = ['employee_name', 'employee_phone', 'field_study', 'experience', 'educ_level', 'gpa', 'action'];\n\nvar Appliers = /*#__PURE__*/function (_Component) {\n  _inherits(Appliers, _Component);\n\n  var _super = _createSuper(Appliers);\n\n  function Appliers(props) {\n    var _this;\n\n    _classCallCheck(this, Appliers);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      info: false,\n      status: 'Active',\n      dataRows: []\n    };\n\n    _this.componentWillMount = function () {\n      var id = _this.props.match.params.id;\n\n      try {\n        axios.get('/applied_seeker_vacancy/' + id).then(function (res) {\n          console.log('test', res.data);\n\n          _this.setState({\n            dataRows: res.data\n          });\n        });\n      } catch (err) {}\n    };\n\n    _this.handleSave = function (e) {\n      e.preventDefault();\n      var data = {\n        setting_name: _this.settingName,\n        status: _this.state.status,\n        type: \"Language\"\n      };\n\n      try {\n        axios.post('/save_settings', data).then(function (res) {\n          if (res.data[0].setting_id) {\n            _this.handleResponseToast('New language has added successfully!', true);\n\n            document.getElementById(\"reset-form\").reset();\n\n            _this.setState({\n              info: false\n            });\n\n            _this.componentWillMount();\n          }\n        });\n      } catch (err) {\n        _this.handleResponseToast('OOPS! Try again', false);\n      }\n    };\n\n    _this.handleResponseToast = function (msg, status) {\n      var Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 4000,\n        timerProgressBar: true,\n        didOpen: function didOpen(toast) {\n          toast.addEventListener('mouseenter', Swal.stopTimer);\n          toast.addEventListener('mouseleave', Swal.resumeTimer);\n        }\n      });\n\n      if (status) {\n        Toast.fire({\n          icon: 'success',\n          title: msg\n        });\n      } else {\n        Toast.fire({\n          icon: 'error',\n          title: msg\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Appliers, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CRow, {\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            children: /*#__PURE__*/_jsxDEV(CCard, {\n              children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n                children: \"Job seekers informations\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n                children: /*#__PURE__*/_jsxDEV(CDataTable, {\n                  items: this.state.dataRows,\n                  fields: fields,\n                  hover: true,\n                  striped: true,\n                  bordered: true,\n                  size: \"sm\",\n                  itemsPerPage: 10,\n                  pagination: true,\n                  scopedSlots: ({\n                    'setting_status': function setting_status(item) {\n                      return /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(CBadge, {\n                          color: getBadge(item.setting_status),\n                          children: item.setting_status\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 131,\n                          columnNumber: 27\n                        }, _this2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 130,\n                        columnNumber: 25\n                      }, _this2);\n                    }\n                  }, {\n                    'action': function action(item) {\n                      return /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(Link, {\n                          children: /*#__PURE__*/_jsxDEV(CIcon, {\n                            name: \"cil-user\",\n                            style: {\n                              color: \"green\"\n                            },\n                            title: \"View seeker information\"\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 141,\n                            columnNumber: 34\n                          }, _this2)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 141,\n                          columnNumber: 27\n                        }, _this2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 140,\n                        columnNumber: 25\n                      }, _this2);\n                    }\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 117,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CModal, {\n          show: this.state.info,\n          onClose: function onClose() {\n            return _this2.setState({\n              info: false\n            });\n          },\n          color: \"info\",\n          children: /*#__PURE__*/_jsxDEV(CForm, {\n            onSubmit: this.handleSave.bind(this),\n            id: \"reset-form\",\n            children: [/*#__PURE__*/_jsxDEV(CModalHeader, {\n              closeButton: true,\n              children: /*#__PURE__*/_jsxDEV(CModalTitle, {\n                children: \"New languages\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 14\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(CModalBody, {\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"company\",\n                  children: \"Language\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(CInput, {\n                  id: \"company\",\n                  onChange: function onChange(e) {\n                    return _this2.settingName = e.target.value;\n                  },\n                  style: {\n                    color: \"black\"\n                  },\n                  placeholder: \"Enter language name\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"vat\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(CSelect, {\n                  style: {\n                    color: \"black\"\n                  },\n                  custom: true,\n                  onChange: function onChange(e) {\n                    return _this2.setState({\n                      status: e.target.value\n                    });\n                  },\n                  name: \"ccmonth\",\n                  id: \"ccmonth\",\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Active\",\n                    children: \"Active\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 20\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Pending\",\n                    children: \"Pending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 20\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(CModalFooter, {\n              children: [/*#__PURE__*/_jsxDEV(CButton, {\n                color: \"secondary\",\n                onClick: function onClick() {\n                  return _this2.setState({\n                    info: false\n                  });\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 176,\n                columnNumber: 14\n              }, this), /*#__PURE__*/_jsxDEV(CButton, {\n                color: \"info\",\n                type: \"submit\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 177,\n                columnNumber: 14\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 12\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true);\n    }\n  }]);\n\n  return Appliers;\n}(Component);\n\nexport default Appliers;","map":{"version":3,"sources":["/home/npm/Downloads/temp/src/views/Appliers.js"],"names":["React","Component","CBadge","CCard","CCardBody","CCardHeader","CCol","CDataTable","CModal","CModalBody","CModalFooter","CModalHeader","CModalTitle","CFormGroup","CInput","CLabel","CSelect","CForm","CButton","CRow","axios","Swal","CIcon","Link","getBadge","status","fields","Appliers","props","state","info","dataRows","componentWillMount","id","match","params","get","then","res","console","log","data","setState","err","handleSave","e","preventDefault","setting_name","settingName","type","post","setting_id","handleResponseToast","document","getElementById","reset","msg","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","fire","icon","title","item","setting_status","color","bind","target","value"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport {\n    CBadge,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CDataTable,\n    CModal,\n    CModalBody,\n    CModalFooter,\n    CModalHeader,\n    CModalTitle,\n    CFormGroup,\n    CInput,\n    CLabel,\n    CSelect,\n    CForm,\n    CButton,\n    CRow\n  } from '@coreui/react'  \n  import axios from 'axios';\n  import Swal from 'sweetalert2'\n  import CIcon from '@coreui/icons-react'\nimport { Link } from 'react-router-dom';\n  \n  const getBadge = status => {\n    switch (status) {\n      case 'Active': return'success';\n      case 'Inactive': return 'secondary'\n      case 'Pending': return 'warning'\n      case 'Banned': return 'danger'\n      default: return 'primary'\n    }\n  }\n  const fields = ['employee_name','employee_phone','field_study', 'experience','educ_level','gpa','action']\nclass Appliers extends Component {\n    state = {\n        info:false,\n        status:'Active',\n        dataRows:[]\n    }\n    constructor(props) {\n        super(props);\n      \n    }\n    componentWillMount=()=>{\n      const id = this.props.match.params.id;\n        try {\n    axios.get('/applied_seeker_vacancy/'+id).then(res=>{\n      console.log('test',res.data);\n     this.setState({dataRows:res.data});\n    });\n    } catch(err) {\n      \n    }\n    }\n    handleSave=(e)=>{\n        e.preventDefault();\n        const data={\n            setting_name:this.settingName,\n            status:this.state.status,\n            type:\"Language\"\n        };\n\n        try {\n      \n            axios.post('/save_settings',data).then(res=>{\n                if(res.data[0].setting_id){\n                  this.handleResponseToast('New language has added successfully!',true);\n                  document.getElementById(\"reset-form\").reset();\n                  this.setState({info:false});\n                  this.componentWillMount();\n                }\n              });\n           } catch(err){\n            this.handleResponseToast('OOPS! Try again',false);\n            }\n          }\n\n        \n          handleResponseToast=(msg,status)=>{\n            const Toast = Swal.mixin({\n              toast: true,\n              position: 'top-end',\n              showConfirmButton: false,\n              timer: 4000,\n              timerProgressBar: true,\n              didOpen: (toast) => {\n                toast.addEventListener('mouseenter', Swal.stopTimer)\n                toast.addEventListener('mouseleave', Swal.resumeTimer)\n              }\n            })\n            if (status) {\n                Toast.fire({\n              icon: 'success',\n              title: msg\n            })\n          } else {\n            Toast.fire({\n              icon: 'error',\n              title: msg\n            })\n          }\n           }\n    render() { \n        return (\n            <>\n            <CRow>\n            <CCol>\n              <CCard>\n                <CCardHeader>\n                 Job seekers informations \n                  \n                </CCardHeader>\n                <CCardBody>\n                <CDataTable\n                  items={this.state.dataRows}\n                  fields={fields}\n                  hover\n                  striped\n                  bordered\n                  size=\"sm\"\n                  itemsPerPage={10}\n                  pagination\n                  scopedSlots = {\n                      {\n                    'setting_status':\n                      (item)=>(\n                        <td>\n                          <CBadge\n                            color={getBadge(item.setting_status)}>\n                            {item.setting_status}\n                          </CBadge>\n                        </td>\n                      )\n                  },{\n                    'action':\n                      (item)=>(\n                        <td>\n                          <Link ><CIcon name=\"cil-user\" style={{color:\"green\"}} title=\"View seeker information\"/></Link>\n                        </td>\n                      )\n                  }\n                }\n                />\n                </CCardBody>\n              </CCard>\n            </CCol>\n           \n          </CRow>\n           <CModal \n           show={this.state.info} \n           onClose={() => this.setState({info:false})}\n           color=\"info\"\n           >\n               <CForm onSubmit={this.handleSave.bind(this)} id=\"reset-form\">\n           <CModalHeader closeButton>\n             <CModalTitle>New languages</CModalTitle>\n           </CModalHeader>\n           <CModalBody>\n           <CFormGroup>\n             <CLabel htmlFor=\"company\">Language</CLabel>\n             <CInput id=\"company\" onChange={(e=>this.settingName=e.target.value)} style={{color:\"black\"}} placeholder=\"Enter language name\" required/>\n           </CFormGroup>\n           <CFormGroup>\n             <CLabel htmlFor=\"vat\">Status</CLabel>\n             <CSelect style={{color:\"black\"}} custom onChange={(e=>this.setState({status:e.target.value}))} name=\"ccmonth\" id=\"ccmonth\" required>\n                   <option value=\"Active\">Active</option>\n                   <option value=\"Pending\">Pending</option>\n                 </CSelect>\n           </CFormGroup>\n          \n           </CModalBody>\n           <CModalFooter>\n             <CButton color=\"secondary\" onClick={() => this.setState({info:false})}>Cancel</CButton>\n             <CButton color=\"info\" type=\"submit\">Save</CButton>\n           </CModalFooter>\n           </CForm>\n         </CModal>\n         </>\n        );\n    }\n}\n \nexport default Appliers;"]},"metadata":{},"sourceType":"module"}