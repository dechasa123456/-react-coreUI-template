{"ast":null,"code":"import _classCallCheck from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/npm/Downloads/temp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/npm/Downloads/temp/src/views/SettingInstitute.js\";\nimport React, { Component } from 'react';\nimport { CBadge, CCard, CCardBody, CCardHeader, CCol, CDataTable, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle, CFormGroup, CInput, CLabel, CSelect, CForm, CButton, CRow } from '@coreui/react';\nimport axios from 'axios';\nimport Swal from 'sweetalert2';\nimport usersData from './users/UsersData';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar getBadge = function getBadge(status) {\n  switch (status) {\n    case 'Active':\n      return 'success';\n\n    case 'Inactive':\n      return 'secondary';\n\n    case 'Pending':\n      return 'warning';\n\n    case 'Banned':\n      return 'danger';\n\n    default:\n      return 'primary';\n  }\n};\n\nvar fields = ['vacancy_name', 'registered', 'role', 'Action'];\n\nvar SettingInstitute = /*#__PURE__*/function (_Component) {\n  _inherits(SettingInstitute, _Component);\n\n  var _super = _createSuper(SettingInstitute);\n\n  function SettingInstitute(props) {\n    var _this;\n\n    _classCallCheck(this, SettingInstitute);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      info: false,\n      status: 'Active'\n    };\n\n    _this.handleSave = function (e) {\n      e.preventDefault();\n      var data = {\n        setting_name: _this.settingName,\n        status: _this.state.status,\n        type: \"Institute\"\n      };\n\n      try {\n        axios.post('/save_settings', data).then(function (res) {\n          if (res.data[0].setting_id) {\n            _this.handleResponseToast('New institute has added successfully!', true);\n\n            document.getElementById(\"reset-form\").reset();\n\n            _this.setState({\n              info: false\n            });\n          }\n        });\n      } catch (err) {\n        _this.handleResponseToast('OOPS! Try again', false);\n      }\n    };\n\n    _this.handleResponseToast = function (msg, status) {\n      var Toast = Swal.mixin({\n        toast: true,\n        position: 'top-end',\n        showConfirmButton: false,\n        timer: 4000,\n        timerProgressBar: true,\n        didOpen: function didOpen(toast) {\n          toast.addEventListener('mouseenter', Swal.stopTimer);\n          toast.addEventListener('mouseleave', Swal.resumeTimer);\n        }\n      });\n\n      if (status) {\n        Toast.fire({\n          icon: 'success',\n          title: msg\n        });\n      } else {\n        Toast.fire({\n          icon: 'error',\n          title: msg\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(SettingInstitute, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(CRow, {\n          children: /*#__PURE__*/_jsxDEV(CCol, {\n            children: /*#__PURE__*/_jsxDEV(CCard, {\n              children: [/*#__PURE__*/_jsxDEV(CCardHeader, {\n                children: [\"Setting institute information\", /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    float: 'right'\n                  },\n                  children: /*#__PURE__*/_jsxDEV(CButton, {\n                    className: \"btn btn-info btn-block btn-pill\",\n                    onClick: function onClick() {\n                      return _this2.setState({\n                        info: true\n                      });\n                    },\n                    children: \"Add Institute\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 102,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 99,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(CCardBody, {\n                children: /*#__PURE__*/_jsxDEV(CDataTable, {\n                  items: usersData,\n                  fields: fields,\n                  hover: true,\n                  striped: true,\n                  bordered: true,\n                  size: \"sm\",\n                  itemsPerPage: 10,\n                  pagination: true,\n                  scopedSlots: {\n                    'Action': function Action(item) {\n                      return /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: /*#__PURE__*/_jsxDEV(CBadge, {\n                          color: getBadge(item.status),\n                          children: item.status\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 119,\n                          columnNumber: 27\n                        }, _this2)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 118,\n                        columnNumber: 25\n                      }, _this2);\n                    }\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(CModal, {\n          show: this.state.info,\n          onClose: function onClose() {\n            return _this2.setState({\n              info: false\n            });\n          },\n          color: \"info\",\n          children: /*#__PURE__*/_jsxDEV(CForm, {\n            onSubmit: this.handleSave.bind(this),\n            id: \"reset-form\",\n            children: [/*#__PURE__*/_jsxDEV(CModalHeader, {\n              closeButton: true,\n              children: /*#__PURE__*/_jsxDEV(CModalTitle, {\n                children: \"New institutes\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 14\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(CModalBody, {\n              children: [/*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"company\",\n                  children: \"institute\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(CInput, {\n                  id: \"company\",\n                  onChange: function onChange(e) {\n                    return _this2.settingName = e.target.value;\n                  },\n                  style: {\n                    color: \"black\"\n                  },\n                  placeholder: \"Enter institute name\",\n                  required: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 144,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 12\n              }, this), /*#__PURE__*/_jsxDEV(CFormGroup, {\n                children: [/*#__PURE__*/_jsxDEV(CLabel, {\n                  htmlFor: \"vat\",\n                  children: \"Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 147,\n                  columnNumber: 14\n                }, this), /*#__PURE__*/_jsxDEV(CSelect, {\n                  style: {\n                    color: \"black\"\n                  },\n                  custom: true,\n                  onChange: function onChange(e) {\n                    return _this2.setState({\n                      status: e.target.value\n                    });\n                  },\n                  name: \"ccmonth\",\n                  id: \"ccmonth\",\n                  required: true,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Active\",\n                    children: \"Active\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 149,\n                    columnNumber: 20\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Pending\",\n                    children: \"Pending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 150,\n                    columnNumber: 20\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 148,\n                  columnNumber: 14\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 146,\n                columnNumber: 12\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 12\n            }, this), /*#__PURE__*/_jsxDEV(CModalFooter, {\n              children: [/*#__PURE__*/_jsxDEV(CButton, {\n                color: \"secondary\",\n                onClick: function onClick() {\n                  return _this2.setState({\n                    info: false\n                  });\n                },\n                children: \"Cancel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 14\n              }, this), /*#__PURE__*/_jsxDEV(CButton, {\n                color: \"info\",\n                type: \"submit\",\n                children: \"Save\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 14\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 12\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 16\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true);\n    }\n  }]);\n\n  return SettingInstitute;\n}(Component);\n\nexport default SettingInstitute;","map":{"version":3,"sources":["/home/npm/Downloads/temp/src/views/SettingInstitute.js"],"names":["React","Component","CBadge","CCard","CCardBody","CCardHeader","CCol","CDataTable","CModal","CModalBody","CModalFooter","CModalHeader","CModalTitle","CFormGroup","CInput","CLabel","CSelect","CForm","CButton","CRow","axios","Swal","usersData","Link","getBadge","status","fields","SettingInstitute","props","state","info","handleSave","e","preventDefault","data","setting_name","settingName","type","post","then","res","setting_id","handleResponseToast","document","getElementById","reset","setState","err","msg","Toast","mixin","toast","position","showConfirmButton","timer","timerProgressBar","didOpen","addEventListener","stopTimer","resumeTimer","fire","icon","title","float","item","bind","target","value","color"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAcC,SAAd,QAA8B,OAA9B;AACA,SACIC,MADJ,EAEIC,KAFJ,EAGIC,SAHJ,EAIIC,WAJJ,EAKIC,IALJ,EAMIC,UANJ,EAOIC,MAPJ,EAQIC,UARJ,EASIC,YATJ,EAUIC,YAVJ,EAWIC,WAXJ,EAYIC,UAZJ,EAaIC,MAbJ,EAcIC,MAdJ,EAeIC,OAfJ,EAgBIC,KAhBJ,EAiBIC,OAjBJ,EAkBIC,IAlBJ,QAmBS,eAnBT;AAoBE,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AACF,SAASC,IAAT,QAAqB,kBAArB;;;;AAEE,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,MAAM,EAAI;AACzB,UAAQA,MAAR;AACE,SAAK,QAAL;AAAe,aAAM,SAAN;;AACf,SAAK,UAAL;AAAiB,aAAO,WAAP;;AACjB,SAAK,SAAL;AAAgB,aAAO,SAAP;;AAChB,SAAK,QAAL;AAAe,aAAO,QAAP;;AACf;AAAS,aAAO,SAAP;AALX;AAOD,CARD;;AASA,IAAMC,MAAM,GAAG,CAAC,cAAD,EAAgB,YAAhB,EAA8B,MAA9B,EAAsC,QAAtC,CAAf;;IACIC,gB;;;;;AAKF,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AADe,UAJnBC,KAImB,GAJX;AACJC,MAAAA,IAAI,EAAC,KADD;AAEJL,MAAAA,MAAM,EAAC;AAFH,KAIW;;AAAA,UAInBM,UAJmB,GAIR,UAACC,CAAD,EAAK;AACZA,MAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,IAAI,GAAC;AACPC,QAAAA,YAAY,EAAC,MAAKC,WADX;AAEPX,QAAAA,MAAM,EAAC,MAAKI,KAAL,CAAWJ,MAFX;AAGPY,QAAAA,IAAI,EAAC;AAHE,OAAX;;AAMA,UAAI;AAEAjB,QAAAA,KAAK,CAACkB,IAAN,CAAW,gBAAX,EAA4BJ,IAA5B,EAAkCK,IAAlC,CAAuC,UAAAC,GAAG,EAAE;AACxC,cAAGA,GAAG,CAACN,IAAJ,CAAS,CAAT,EAAYO,UAAf,EAA0B;AACxB,kBAAKC,mBAAL,CAAyB,uCAAzB,EAAiE,IAAjE;;AACAC,YAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,KAAtC;;AACA,kBAAKC,QAAL,CAAc;AAAChB,cAAAA,IAAI,EAAC;AAAN,aAAd;AACD;AACF,SANH;AAOA,OATJ,CASK,OAAMiB,GAAN,EAAU;AACX,cAAKL,mBAAL,CAAyB,iBAAzB,EAA2C,KAA3C;AACC;AACF,KAxBY;;AAAA,UA2BbA,mBA3Ba,GA2BO,UAACM,GAAD,EAAKvB,MAAL,EAAc;AAChC,UAAMwB,KAAK,GAAG5B,IAAI,CAAC6B,KAAL,CAAW;AACvBC,QAAAA,KAAK,EAAE,IADgB;AAEvBC,QAAAA,QAAQ,EAAE,SAFa;AAGvBC,QAAAA,iBAAiB,EAAE,KAHI;AAIvBC,QAAAA,KAAK,EAAE,IAJgB;AAKvBC,QAAAA,gBAAgB,EAAE,IALK;AAMvBC,QAAAA,OAAO,EAAE,iBAACL,KAAD,EAAW;AAClBA,UAAAA,KAAK,CAACM,gBAAN,CAAuB,YAAvB,EAAqCpC,IAAI,CAACqC,SAA1C;AACAP,UAAAA,KAAK,CAACM,gBAAN,CAAuB,YAAvB,EAAqCpC,IAAI,CAACsC,WAA1C;AACD;AATsB,OAAX,CAAd;;AAWA,UAAIlC,MAAJ,EAAY;AACRwB,QAAAA,KAAK,CAACW,IAAN,CAAW;AACbC,UAAAA,IAAI,EAAE,SADO;AAEbC,UAAAA,KAAK,EAAEd;AAFM,SAAX;AAIL,OALC,MAKK;AACLC,QAAAA,KAAK,CAACW,IAAN,CAAW;AACTC,UAAAA,IAAI,EAAE,OADG;AAETC,UAAAA,KAAK,EAAEd;AAFE,SAAX;AAID;AACC,KAlDW;;AAAA;AAGlB;;;;WAgDD,kBAAS;AAAA;;AACL,0BACI;AAAA,gCACA,QAAC,IAAD;AAAA,iCACA,QAAC,IAAD;AAAA,mCACE,QAAC,KAAD;AAAA,sCACE,QAAC,WAAD;AAAA,yEAEE;AAAK,kBAAA,KAAK,EAAE;AAACe,oBAAAA,KAAK,EAAC;AAAP,mBAAZ;AAAA,yCACA,QAAC,OAAD;AAAS,oBAAA,SAAS,EAAC,iCAAnB;AAAqD,oBAAA,OAAO,EAAE;AAAA,6BAAM,MAAI,CAACjB,QAAL,CAAc;AAAChB,wBAAAA,IAAI,EAAC;AAAN,uBAAd,CAAN;AAAA,qBAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAOE,QAAC,SAAD;AAAA,uCACA,QAAC,UAAD;AACE,kBAAA,KAAK,EAAER,SADT;AAEE,kBAAA,MAAM,EAAEI,MAFV;AAGE,kBAAA,KAAK,MAHP;AAIE,kBAAA,OAAO,MAJT;AAKE,kBAAA,QAAQ,MALV;AAME,kBAAA,IAAI,EAAC,IANP;AAOE,kBAAA,YAAY,EAAE,EAPhB;AAQE,kBAAA,UAAU,MARZ;AASE,kBAAA,WAAW,EAAI;AACb,8BACE,gBAACsC,IAAD;AAAA,0CACE;AAAA,+CACE,QAAC,MAAD;AACE,0BAAA,KAAK,EAAExC,QAAQ,CAACwC,IAAI,CAACvC,MAAN,CADjB;AAAA,oCAEGuC,IAAI,CAACvC;AAFR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gCADF;AAAA;AAFW;AATjB;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBADA,eAqCD,QAAC,MAAD;AACA,UAAA,IAAI,EAAE,KAAKI,KAAL,CAAWC,IADjB;AAEA,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACgB,QAAL,CAAc;AAAChB,cAAAA,IAAI,EAAC;AAAN,aAAd,CAAN;AAAA,WAFT;AAGA,UAAA,KAAK,EAAC,MAHN;AAAA,iCAKI,QAAC,KAAD;AAAO,YAAA,QAAQ,EAAE,KAAKC,UAAL,CAAgBkC,IAAhB,CAAqB,IAArB,CAAjB;AAA6C,YAAA,EAAE,EAAC,YAAhD;AAAA,oCACJ,QAAC,YAAD;AAAc,cAAA,WAAW,MAAzB;AAAA,qCACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADI,eAIJ,QAAC,UAAD;AAAA,sCACA,QAAC,UAAD;AAAA,wCACE,QAAC,MAAD;AAAQ,kBAAA,OAAO,EAAC,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,MAAD;AAAQ,kBAAA,EAAE,EAAC,SAAX;AAAqB,kBAAA,QAAQ,EAAG,kBAAAjC,CAAC;AAAA,2BAAE,MAAI,CAACI,WAAL,GAAiBJ,CAAC,CAACkC,MAAF,CAASC,KAA5B;AAAA,mBAAjC;AAAqE,kBAAA,KAAK,EAAE;AAACC,oBAAAA,KAAK,EAAC;AAAP,mBAA5E;AAA6F,kBAAA,WAAW,EAAC,sBAAzG;AAAgI,kBAAA,QAAQ;AAAxI;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBADA,eAKA,QAAC,UAAD;AAAA,wCACE,QAAC,MAAD;AAAQ,kBAAA,OAAO,EAAC,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE,QAAC,OAAD;AAAS,kBAAA,KAAK,EAAE;AAACA,oBAAAA,KAAK,EAAC;AAAP,mBAAhB;AAAiC,kBAAA,MAAM,MAAvC;AAAwC,kBAAA,QAAQ,EAAG,kBAAApC,CAAC;AAAA,2BAAE,MAAI,CAACc,QAAL,CAAc;AAACrB,sBAAAA,MAAM,EAACO,CAAC,CAACkC,MAAF,CAASC;AAAjB,qBAAd,CAAF;AAAA,mBAApD;AAA+F,kBAAA,IAAI,EAAC,SAApG;AAA8G,kBAAA,EAAE,EAAC,SAAjH;AAA2H,kBAAA,QAAQ,MAAnI;AAAA,0CACM;AAAQ,oBAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADN,eAEM;AAAQ,oBAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAFN;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,sBALA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJI,eAkBJ,QAAC,YAAD;AAAA,sCACE,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAC,WAAf;AAA2B,gBAAA,OAAO,EAAE;AAAA,yBAAM,MAAI,CAACrB,QAAL,CAAc;AAAChB,oBAAAA,IAAI,EAAC;AAAN,mBAAd,CAAN;AAAA,iBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAC,MAAf;AAAsB,gBAAA,IAAI,EAAC,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAlBI;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,gBArCC;AAAA,sBADJ;AAqEH;;;;EA9H0B7B,S;;AAiI/B,eAAe0B,gBAAf","sourcesContent":["import React,{Component} from 'react';\nimport {\n    CBadge,\n    CCard,\n    CCardBody,\n    CCardHeader,\n    CCol,\n    CDataTable,\n    CModal,\n    CModalBody,\n    CModalFooter,\n    CModalHeader,\n    CModalTitle,\n    CFormGroup,\n    CInput,\n    CLabel,\n    CSelect,\n    CForm,\n    CButton,\n    CRow\n  } from '@coreui/react'  \n  import axios from 'axios';\n  import Swal from 'sweetalert2'\n  import usersData from './users/UsersData'\nimport { Link } from 'react-router-dom';\n  \n  const getBadge = status => {\n    switch (status) {\n      case 'Active': return'success';\n      case 'Inactive': return 'secondary'\n      case 'Pending': return 'warning'\n      case 'Banned': return 'danger'\n      default: return 'primary'\n    }\n  }\n  const fields = ['vacancy_name','registered', 'role', 'Action']\nclass SettingInstitute extends Component {\n    state = {\n        info:false,\n        status:'Active'\n    }\n    constructor(props) {\n        super(props);\n      \n    }\n    handleSave=(e)=>{\n        e.preventDefault();\n        const data={\n            setting_name:this.settingName,\n            status:this.state.status,\n            type:\"Institute\"\n        };\n\n        try {\n      \n            axios.post('/save_settings',data).then(res=>{\n                if(res.data[0].setting_id){\n                  this.handleResponseToast('New institute has added successfully!',true);\n                  document.getElementById(\"reset-form\").reset();\n                  this.setState({info:false});\n                }\n              });\n           } catch(err){\n            this.handleResponseToast('OOPS! Try again',false);\n            }\n          }\n\n        \n          handleResponseToast=(msg,status)=>{\n            const Toast = Swal.mixin({\n              toast: true,\n              position: 'top-end',\n              showConfirmButton: false,\n              timer: 4000,\n              timerProgressBar: true,\n              didOpen: (toast) => {\n                toast.addEventListener('mouseenter', Swal.stopTimer)\n                toast.addEventListener('mouseleave', Swal.resumeTimer)\n              }\n            })\n            if (status) {\n                Toast.fire({\n              icon: 'success',\n              title: msg\n            })\n          } else {\n            Toast.fire({\n              icon: 'error',\n              title: msg\n            })\n          }\n           }\n    render() { \n        return (\n            <>\n            <CRow>\n            <CCol>\n              <CCard>\n                <CCardHeader>\n                 Setting institute information\n                  <div style={{float:'right'}}>\n                  <CButton className=\"btn btn-info btn-block btn-pill\" onClick={() => this.setState({info:true})}>Add Institute</CButton>\n                  </div>\n                </CCardHeader>\n                <CCardBody>\n                <CDataTable\n                  items={usersData}\n                  fields={fields}\n                  hover\n                  striped\n                  bordered\n                  size=\"sm\"\n                  itemsPerPage={10}\n                  pagination\n                  scopedSlots = {{\n                    'Action':\n                      (item)=>(\n                        <td>\n                          <CBadge\n                            color={getBadge(item.status)}>\n                            {item.status}\n                          </CBadge>\n                        </td>\n                      )\n                  }}\n                />\n                </CCardBody>\n              </CCard>\n            </CCol>\n           \n          </CRow>\n           <CModal \n           show={this.state.info} \n           onClose={() => this.setState({info:false})}\n           color=\"info\"\n           >\n               <CForm onSubmit={this.handleSave.bind(this)} id=\"reset-form\" >\n           <CModalHeader closeButton>\n             <CModalTitle>New institutes</CModalTitle>\n           </CModalHeader>\n           <CModalBody>\n           <CFormGroup>\n             <CLabel htmlFor=\"company\">institute</CLabel>\n             <CInput id=\"company\" onChange={(e=>this.settingName=e.target.value)} style={{color:\"black\"}} placeholder=\"Enter institute name\" required/>\n           </CFormGroup>\n           <CFormGroup>\n             <CLabel htmlFor=\"vat\">Status</CLabel>\n             <CSelect style={{color:\"black\"}} custom onChange={(e=>this.setState({status:e.target.value}))} name=\"ccmonth\" id=\"ccmonth\" required>\n                   <option value=\"Active\">Active</option>\n                   <option value=\"Pending\">Pending</option>\n                 </CSelect>\n           </CFormGroup>\n          \n           </CModalBody>\n           <CModalFooter>\n             <CButton color=\"secondary\" onClick={() => this.setState({info:false})}>Cancel</CButton>\n             <CButton color=\"info\" type=\"submit\">Save</CButton>\n           </CModalFooter>\n           </CForm>\n         </CModal>\n         </>\n        );\n    }\n}\n \nexport default SettingInstitute;"]},"metadata":{},"sourceType":"module"}